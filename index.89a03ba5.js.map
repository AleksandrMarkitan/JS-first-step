{"mappings":"AAKA,IAAMA,SAAW,6BAEXC,QAAU,CACdC,IAAK,QACLC,KAAM,UACNC,MAAO,KACPC,IAAK,uCAGDC,QAAU,CACdJ,IAAK,QACLC,KAAM,UACNC,MAAO,KACPC,IAAK,+CAGDE,WAAa,CACjBH,MAAO,KAGT,SAASI,OAAON,GACd,IAAMO,EAAU,CACdC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMV,GAER,OAAOW,MAAM,GAAYC,OAATd,UAAYS,GAASM,MAAK,SAAAC,GACxC,IAAKA,EAAKC,GACR,MAAM,IAAIC,MAAMF,EAAKG,YAEvB,OAAOH,EAAKI,QAIhB,SAASC,cAAcnB,EAAKoB,GAC1B,IAAMb,EAAU,CACdC,OAAQ,QACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMW,KAAKC,UAAUtB,IAEvB,OAAOW,MAAM,GAAeC,OAAZd,SAAS,KAAMc,OAAHQ,GAAMb,GAASM,MAAK,SAAAC,GAC9C,IAAKA,EAAKC,GACR,MAAM,IAAIC,MAAMF,EAAKG,YAEvB,OAAOH,EAAKI,QAIhB,SAASK,gBAAc,QAAAC,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GACrB,IAAMtB,EAAU,CACdC,OAAQ,UAELsB,GAAE,EAAFC,GAAE,EAAFC,OAAEC,E,IAAP,QAAKC,EAAAC,EAAMR,EAAGS,OAAAC,cAATP,GAAAI,EAAAC,EAAEG,QAAAC,MAAFT,GAAE,EAAFV,GAAAc,EAAEM,MACL7B,MAAM,GAAeC,OAAZd,SAAS,KAAMc,OAAHQ,IAAMb,GAASM,MAAK,SAAAC,GACvC,IAAKA,EAAKC,GACR,MAAM,IAAIC,MAAMF,EAAKG,YAEvB,OAAOH,EAAKI,Q,SALXa,GAAE,EAAFC,EAAES,E,YAAFX,GAAE,MAAFK,EAAEO,QAAFP,EAAEO,S,WAAFX,E,MAAAC","sources":["src/js/mod-11-CRUD-virtDatabase.js"],"sourcesContent":["// Інсталяція віртуального бекенду: npm i --save-dev json-server\n// внести зміни в файл package.json, а саме в об'єкт \"scripts\" додати:\n// \"server\": \"json-server --watch db.json\"\n// запуск сервера:  npm run server\n\nconst BASE_URL = 'http://localhost:3000/cars';\n\nconst newCar1 = {\n  car: 'Tesla',\n  type: 'model X',\n  price: 45000,\n  img: 'https://encrypted-tbn0.gstatic.com/',\n};\n\nconst newCar2 = {\n  car: 'Tesla',\n  type: 'model S',\n  price: 35000,\n  img: 'https://images.app.goo.gl/71Zen5P3uZRi5ApH9',\n};\n\nconst changeCar1 = {\n  price: 40000,\n};\n\nfunction addCar(car) {\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: car,\n  };\n  return fetch(`${BASE_URL}`, options).then(resp => {\n    if (!resp.ok) {\n      throw new Error(resp.statusText);\n    }\n    return resp.json;\n  });\n}\n\nfunction updateCarById(car, id) {\n  const options = {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(car),\n  };\n  return fetch(`${BASE_URL}/${id}`, options).then(resp => {\n    if (!resp.ok) {\n      throw new Error(resp.statusText);\n    }\n    return resp.json;\n  });\n}\n\nfunction deleteCarById(...ids) {\n  const options = {\n    method: 'DELETE',\n  };\n  for (id of ids) {\n    fetch(`${BASE_URL}/${id}`, options).then(resp => {\n      if (!resp.ok) {\n        throw new Error(resp.statusText);\n      }\n      return resp.json;\n    });\n  }\n}\n\n// addCar(newCar1).then(console.log).catch(error=>console.log(error));\n// addCar(newCar2).then(console.log).catch(error=>console.log(error));\n\n// updateCarById(changeCar1, 8).then(console.log).catch(error=>console.log(error));\n\n// deleteCarById(8, 10, 11, 12, 13, 14, 15).then(console.log).catch(error=>console.log(error));\n"],"names":["BASE_URL","newCar1","car","type","price","img","newCar2","changeCar1","addCar","options","method","headers","body","fetch","concat","then","resp","ok","Error","statusText","json","updateCarById","id","JSON","stringify","deleteCarById","_len","arguments","length","ids","Array","_key","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","err","return"],"version":3,"file":"index.89a03ba5.js.map"}