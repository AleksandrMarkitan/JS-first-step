{"mappings":"AA2KA,SAAAA,kBAAAC,EAAAC,I,+oDAAA,SAASC,OAAOC,EAAGC,GACjBF,OAASG,KAAKC,IAAMH,EAAIC,EACxBG,QAAQC,IAAI,MAAOH,KAAKI,KAAM,IAAKP,QAGrCK,QAAQC,IAAIN,OAAOQ,WAEnB,IAAMC,KAAO,CACXF,KAAM,QACNH,IAAK,IAEDM,KAAO,CACXH,KAAM,OACNH,IAAK,GACLO,WAAYX,QAERY,KAAO,CACXL,KAAM,QACNH,IAAK,GACLO,WAAYX,QAGdS,KAAKE,WAAaX,OAElBS,KAAKE,WAAW,EAAG,GAEnB,IAAME,MAAQ,CACZC,SAAU,eACVC,SAAA,W,WAIkCV,QAAtBC,IAAI,gBAAeU,GAI7BX,QAAQC,IAAI,qBAAsBH,QAItCE,QAAQC,IAAIO,MAAME,SAASP,WAE3BK,MAAME,WAIN,IAAyBE,IAA8BC,eAA9B,oBAAoBC,MAAM,KAAI,GAAhDC,MAAkBH,IAA8B,GAAvCI,MAASJ,IAA8B,GACvDZ,QAAQC,IAAIc,MAAOC,OAEnB,IAAIC,EAAI,GAGNjB,QAAQC,IAAIgB,GAQd,IAJA,IAAMC,IAAM,GACRC,OAAS,EACTC,IAAM,EAEHD,SAAWD,KAChBE,IAAMD,OAGRnB,QAAQC,IAAImB,KAEZ,IAKIC,KAAA,CACFnB,KAAM,MACNH,IAAK,GACLuB,UAAW,QAPXpB,KAIEmB,KAJFnB,KACAH,IAGEsB,KAHFtB,IAAGwB,QAGDF,KAFFG,mBAAM,IAAAD,QAAG,IAAGA,QACZE,MACEJ,KADFC,UAOFtB,QAAQC,IAAIC,KAAMH,IAAKyB,OAAQC,OAE/B,IAAMC,MAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtDC,MAAQ,IAAIC,IAAIF,OACtB1B,QAAQC,IAAI0B,OACZ3B,QAAQC,IAAI0B,MAAME,IAAI,IACtB,IAAMC,WAAcC,mBAAGJ,OACvB3B,QAAQC,IAAI6B,YAEZ,IAAME,MAAQ,W,IAAUC,EAAAC,UAAAC,OAAA,YAAAD,UAAA,GAAiBA,UAAA,GAAF,GAAbE,EAAFH,EAAEG,IAAKC,EAAPJ,EAAOI,IAC7BvC,KAAKsC,IAAMA,EACXtC,KAAKuC,IAAMA,GAGbrC,QAAQC,IAAI+B,MAAM7B,WAElB6B,MAAM7B,UAAUmC,UAAY,SAAUC,GACpCzC,KAAKsC,IAAMG,GAGbvC,QAAQC,IAAI+B,MAAM7B,WAElB,IAAMqC,QAAU,IAAIR,MAAM,CAAEI,IAAK,GAAIC,IAAK,KAE1CrC,QAAQC,IAAIuC,SAEZA,QAAQF,UAAU,KAClBtC,QAAQC,IAAIuC","sources":["src/js/mod-5.js"],"sourcesContent":["// function showThis() {\n//   console.log(\"this in showThis: \", this);\n// }\n\n// // Вызываем в глобальном контексте\n// showThis(); // this in showThis: Window\n\n// const user = {\n//   username: \"Mango\",\n// };\n\n// // Записываем ссылку на функцию в свойство объекта\n// // Обратите внимание, что это не вызов - нет ()\n// user.showContext = showThis;\n\n// // Вызываем функцию в контексте объекта\n// // this будет указывать на текущий объект, в контексте\n// // которого осуществляется вызов, а не на глобальный объект.\n// user.showContext(); // this in showThis: {username: \"Mango\", showContext: ƒ}\n\n// _____________________________________________________________\n// const customer = {\n//   firstName: \"Jacob\",\n//   lastName: \"Mercer\",\n//   getFullName() {\n//     return `${this.firstName} ${this.lastName}`;\n//   },\n// };\n\n// function makeMessage(callback) {\n//   // callback() это вызов метода getFullName без объекта\n//   console.log(`Обрабатываем заявку от ${callback}.`);\n// }\n\n// makeMessage(customer.getFullName()); // Будет ошибка при вызове функции\n\n// function greetGuest(greeting1, greeting2) {\n//   console.log(`${greeting1}!, ${greeting2} ${this.username}.`);\n// }\n\n// const mango = {\n//   username: \"Манго\",\n// };\n// const poly = {\n//   username: \"Поли\",\n// };\n\n// greetGuest.call(poly, \"С приездом\", \"Добро пожаловать\"); // С приездом, Поли.\n// greetGuest.apply(mango, [\"Добро пожаловать\", \"С приездом\"]); // Добро пожаловать, Манго.\n// --------------------------------------------------------\n\n// ________________________________________________________\n// function greet(clientName) {\n//   return `${clientName}, добро пожаловать в «${this.service}».`;\n// }\n\n// const steam = {\n//   service: \"Steam\",\n// };\n// const steamGreeter = greet.bind(steam);\n// steamGreeter(\"Манго\"); // \"Манго, добро пожаловать в «Steam».\"\n\n// const gmail = {\n//   service: \"Gmail\",\n// };\n// const gmailGreeter = greet.bind(gmail);\n// gmailGreeter(\"Поли\"); // \"Поли, добро пожаловать в «Gmail».\"\n\n// // console.log(greet());\n// console.log(steamGreeter(\"Aleksandr\"));\n//---------------------------------------------------------\n\n// ________________________________________________________\n// const customer = {\n//   firstName: \"Jacob\",\n//   lastName: \"Mercer\",\n//   getFullName() {\n//     return `${this.firstName} ${this.lastName}`;\n//   },\n// };\n\n// function makeMessage(callback) {\n//   // callback() это вызов метода getFullName без объекта\n//   console.log(`Обрабатываем заявку от ${callback()}.`);\n// }\n\n// makeMessage(customer.getFullName); // Будет ошибка при вызове функции\n// makeMessage(customer.getFullName.bind(customer));\n\n// const user = {\n//   firstName: \"Alex\",\n//   lastName: \"Shmalex\",\n//   getFullName() {\n//     return `${this.firstName} ${this.lastName}`;\n//   },\n// };\n// makeMessage(customer.getFullName.bind(user));\n// ____________________________________________\n\n// --------------------------------------------\n// const animal = {\n//   eats: true,\n// };\n// const dog = Object.create(animal);\n// dog.barks = true;\n\n// for (const key in dog) {\n//   if (!dog.hasOwnProperty(key)) continue;\n\n//   console.log(key); // barks\n// }\n// ___________________________________________\n\n// -------------------------------------------\n// class User {\n//   // Синтаксис объявления метода класса\n//   constructor(name, email) {\n//     // Инициализация свойств экземпляра\n//     this.name = name;\n//     this.email = email;\n//   }\n//   // Метод getEmail\n//   getEmail() {\n//     return this.email;\n//   }\n\n//   // Метод changeEmail\n//   changeEmail(newEmail) {\n//     this.email = newEmail;\n//   }\n// }\n\n// class UserNickname {\n//   // Синтаксис объявления метода класса\n//   constructor(nickname, score) {\n//     // Инициализация свойств экземпляра\n//     this.nickname = nickname;\n//     this.score = score;\n//   }\n// }\n\n// let mango = new User(\"Манго\", \"mango@mail.com\");\n// console.log(mango); // { name: 'Манго', email: 'mango@mail.com' }\n\n// console.log(mango.changeEmail(\"mangoloid@mail.com\"));\n// console.log(mango.getEmail());\n\n// const poly = new User(\"Поли\", \"poly@mail.com\");\n// console.log(poly); // { name: 'Поли', email: 'poly@mail.com' }\n\n// const mangoNickname = new UserNickname(\"Freek\", 500);\n// mango = { ...mango, ...mangoNickname };\n\n// console.log(mango);\n// ------------------------------------------------------\n\n// const User = function ({ email, password, name } = {}) {\n//   this.name = name;\n//   this.email = email;\n//   this.password = password;\n// };\n// User.workInfo = \"Diffrent things\";\n// User.prototype.changePassword = function (newPasswors) {\n//   return (this.password = newPasswors);\n// };\n// const mango = new User({ email: \"mango@mail.com\", password: 1234567 });\n// console.log(mango);\n// console.log(mango.changePassword(111));\n// console.log(mango);\n// console.log(User);\n\nfunction minAge(a, b) {\n  minAge = this.age / a + b;\n  console.log('for', this.name, '-', minAge);\n}\n\nconsole.log(minAge.prototype);\n\nconst obj1 = {\n  name: 'Sasha',\n  age: 42,\n};\nconst obj2 = {\n  name: 'Serg',\n  age: 30,\n  showMinAge: minAge,\n};\nconst obj3 = {\n  name: 'Vasja',\n  age: 20,\n  showMinAge: minAge,\n};\n\nobj1.showMinAge = minAge;\n\nobj1.showMinAge(2, 7);\n\nconst hotel = {\n  username: 'Resort hotel',\n  showThis() {\n    const foo = () => {\n      // Стрелки запоминают контекст во время объявления,\n      // из родительской области видимости\n      console.log('this in foo: ', this);\n    };\n\n    foo();\n    console.log('this in showThis: ', this);\n  },\n};\n\nconsole.log(hotel.showThis.prototype);\n\nhotel.showThis();\n// this in foo: {username: 'Resort hotel', showThis: ƒ}\n// this in showThis: {username: 'Resort hotel',showThis: ƒ}\n\nconst [first, , third] = 'hello sweet world'.split(' ');\nconsole.log(first, third);\n\nlet b = 20;\n\nif (true) {\n  console.log(b);\n  // let b = 10;\n}\n\nconst MAX = 10;\nlet amount = 0;\nlet sum = 0;\n\nwhile (amount++ < MAX) {\n  sum = amount;\n}\n\nconsole.log(sum);\n\nconst {\n  name,\n  age,\n  gender = 'm',\n  hairColor: color,\n} = {\n  name: 'bob',\n  age: 20,\n  hairColor: 'blue',\n};\n\nconsole.log(name, age, gender, color);\n\nconst array = [1, 2, 3, 4, 1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 0, 6];\nconst mySet = new Set(array);\nconsole.log(mySet);\nconsole.log(mySet.has(0));\nconst mySetArray = [...mySet];\nconsole.log(mySetArray);\n\nconst Class = function ({ own, two } = {}) {\n  this.own = own;\n  this.two = two;\n};\n\nconsole.log(Class.prototype);\n\nClass.prototype.changeOne = function (newOwn) {\n  this.own = newOwn;\n};\n\nconsole.log(Class.prototype);\n\nconst myClass = new Class({ own: 10, two: 20 });\n\nconsole.log(myClass);\n\nmyClass.changeOne(100);\nconsole.log(myClass);\n"],"names":["_arrayLikeToArray","arr","len","minAge","a","b1","this","age","console","log","name","prototype","obj1","obj2","showMinAge","obj3","hotel","username","showThis","_this","ref","_slicedToArray","split","first","third","b","MAX","amount","sum","ref1","hairColor","_gender","gender","color","array","mySet","Set","has","mySetArray","_toConsumableArray","Class","ref2","arguments","length","own","two","changeOne","newOwn","myClass"],"version":3,"file":"index.2e44eb42.js.map"}